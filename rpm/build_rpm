#!/bin/bash
#
# Build a multipath-tools source rpm 
#

RPM="multipath-tools"
BRANCH="sles10-sp4"
BASEVER="0.4.7"
DESTDIR=
uncommitted_changes=0

while [ $# -gt 0 ] ; do
    case "$1" in
	-c|--clean)
	    remove_destdir=1;
	    shift;
	    ;;
        -d)
            DESTDIR=$2;
            shift 2;
            ;;
        --destdir)
            DESTDIR=${$1#*=};
            shift;
            ;;
        -b)
            BRANCH=$2;
            shift 2;
            ;;
        --branch=)
            BRANCH=${1##*=};
            shift;
            ;;
	-o|--use-osc)
	    use_osc=1;
	    shift;
	    ;;
        -f|--force)
            force=1;
            shift;
            ;;
        --uncommitted-changes)
            uncommitted_changes=1
            shift;
            ;;
        *)
            echo "Usage: build_rpm [-c|-f|-o|-u] [-d dir|--destdir=DIR] " \
                 "[-b BRANCH|--branch=BRANCH] [--uncommitted-changes]"
            exit 1;
            ;;
    esac
done

VERSION=$(sed -n 's/Version: *\(.*\)/\1/p' rpm/$RPM.spec)

if ! which git > /dev/null ; then
    echo "git not found, cannot continue"
    exit 1
fi

if [ -z "$BRANCH" ] ; then
    BRANCH="sles10-sp4"
    echo "Branch is not set, checking out from $BRANCH"
fi

if [ -d "$DESTDIR" ] ; then
    if [ -z "$force" ] ; then
        echo "directory $DESTDIR exists, cannot continue"
        exit 1
    else
        if ! rm -rf "$DESTDIR" ; then
            echo "Cannot remove directory $DESTDIR"
            exit 1
        fi
    fi
else
    DESTDIR=$(mktemp -d --tmpdir $RPM-XXXXXXXX)
    if [ ! -d "$DESTDIR" ] ; then
	echo "Cannot create directory $DESTDIR"
	exit 1
    fi
fi

if ! git branch | grep -q "$BRANCH" ; then
    echo "Branch \"$BRANCH\" does not exist"
    exit 1
else
    echo "Checking out from $BRANCH"
fi

if [ -n "$use_osc" ] ; then
    pushd $DESTDIR
    osc co --current-dir home:hreinecke:SLES10-SP4 multipath-tools
    TMPDIR=${DESTDIR}
    DESTDIR="${DESTDIR}/multipath-tools"
    popd
fi

git archive --format=tar --prefix=$RPM-$VERSION/ "$VERSION" \
    | bzip2 > $DESTDIR/$RPM-$VERSION.tar.bz2
git diff $VERSION..$BRANCH | bzip2 > $DESTDIR/$RPM-$VERSION-$BRANCH.diff.bz2

git show $BRANCH:rpm/$RPM.spec > $DESTDIR/$RPM.spec
git show $BRANCH:rpm/$RPM.changes > $DESTDIR/$RPM.changes


#
# if the user specified
if (( $uncommitted_changes )) ; then
    echo "WARNING: Including uncommitted changes for testing." >&2
    echo "         Don't submit the package to Autobuild!"     >&2

    patchname=$RPM-$(date -u +%Y-%M-%d_%T_%Z).diff
    git diff $BRANCH > $DESTDIR/$patchname

    sed -i "/Patch0:.*$/a\
Patch1:\t\t$patchname" $DESTDIR/rpm/$RPM.spec
    sed -i "/%patch0 -p1/a\
%patch1 -p1" $DESTDIR/rpm/$RPM.spec
fi

echo "$RPM src rpm copied to $DESTDIR"

if [ -n "$use_osc" ] ; then
    pushd $DESTDIR
    osc ar
    osc ci --message="Checked in from git branch $BRANCH"
    popd
fi

if [ -n "$remove_destdir" ] ; then
    rm -rf $DESTDIR
    if [ -d "$TMPDIR" ] ; then
	rm -rf $TMPDIR
    fi
fi
